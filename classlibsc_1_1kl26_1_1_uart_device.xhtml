<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.8"/>
<title>libsccc: libsc::kl26::UartDevice Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">libsccc
   &#160;<span id="projectnumber">happy birthday cupcake pre</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.8 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacelibsc.xhtml">libsc</a></li><li class="navelem"><a class="el" href="namespacelibsc_1_1kl26.xhtml">kl26</a></li><li class="navelem"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml">UartDevice</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">libsc::kl26::UartDevice Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;uart_device.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structlibsc_1_1kl26_1_1_uart_device_1_1_config.xhtml">Config</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structlibsc_1_1kl26_1_1_uart_device_1_1_initializer.xhtml">Initializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use to initialize the <a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml">UartDevice</a> in possibly a polymorphic way, notice that <a class="el" href="structlibsc_1_1kl26_1_1_uart_device_1_1_initializer.xhtml#a363cb01fed05899e58e83bfbcee7b20c">Initializer::config</a> is stored as a reference only.  <a href="structlibsc_1_1kl26_1_1_uart_device_1_1_initializer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a91dca2854e630b35785e419a026928d8"><td class="memItemLeft" align="right" valign="top">typedef std::function&lt; bool(const <br class="typebreak" />
Byte)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a91dca2854e630b35785e419a026928d8">OnReceiveListener</a></td></tr>
<tr class="separator:a91dca2854e630b35785e419a026928d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1da7c63948955f172b2517c0508834dd"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a1da7c63948955f172b2517c0508834dd">~UartDevice</a> ()</td></tr>
<tr class="separator:a1da7c63948955f172b2517c0508834dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaec97cf9f8befa243bd8dfa154f5b8de"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#aaec97cf9f8befa243bd8dfa154f5b8de">SendStr</a> (const char *str)</td></tr>
<tr class="memdesc:aaec97cf9f8befa243bd8dfa154f5b8de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a string through UART.  <a href="#aaec97cf9f8befa243bd8dfa154f5b8de">More...</a><br /></td></tr>
<tr class="separator:aaec97cf9f8befa243bd8dfa154f5b8de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5260afddae33bcc6a8897352aba515ec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a5260afddae33bcc6a8897352aba515ec">SendStr</a> (std::unique_ptr&lt; char[]&gt; &amp;&amp;str)</td></tr>
<tr class="memdesc:a5260afddae33bcc6a8897352aba515ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a string through UART.  <a href="#a5260afddae33bcc6a8897352aba515ec">More...</a><br /></td></tr>
<tr class="separator:a5260afddae33bcc6a8897352aba515ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15b3b251f38e8e133cfaab3810baac5a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a15b3b251f38e8e133cfaab3810baac5a">SendStr</a> (std::string &amp;&amp;str)</td></tr>
<tr class="memdesc:a15b3b251f38e8e133cfaab3810baac5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a string through UART.  <a href="#a15b3b251f38e8e133cfaab3810baac5a">More...</a><br /></td></tr>
<tr class="separator:a15b3b251f38e8e133cfaab3810baac5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af96ea32b5d7cb365235eeea352edb3bf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#af96ea32b5d7cb365235eeea352edb3bf">SendBuffer</a> (const Byte *buf, const size_t len)</td></tr>
<tr class="memdesc:af96ea32b5d7cb365235eeea352edb3bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a buffer through UART.  <a href="#af96ea32b5d7cb365235eeea352edb3bf">More...</a><br /></td></tr>
<tr class="separator:af96ea32b5d7cb365235eeea352edb3bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a645521121642cd452635cffb20b011"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a4a645521121642cd452635cffb20b011">SendBuffer</a> (std::unique_ptr&lt; Byte[]&gt; &amp;&amp;buf, const size_t len)</td></tr>
<tr class="memdesc:a4a645521121642cd452635cffb20b011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a buffer through UART.  <a href="#a4a645521121642cd452635cffb20b011">More...</a><br /></td></tr>
<tr class="separator:a4a645521121642cd452635cffb20b011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86411029fa58983a42c0d3f70303be6d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a86411029fa58983a42c0d3f70303be6d">SendBuffer</a> (std::vector&lt; Byte &gt; &amp;&amp;buf)</td></tr>
<tr class="memdesc:a86411029fa58983a42c0d3f70303be6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a buffer through UART.  <a href="#a86411029fa58983a42c0d3f70303be6d">More...</a><br /></td></tr>
<tr class="separator:a86411029fa58983a42c0d3f70303be6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8760c57be58242bb37cd6e1a71509887"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a8760c57be58242bb37cd6e1a71509887">SendStrLiteral</a> (const char *str)</td></tr>
<tr class="memdesc:a8760c57be58242bb37cd6e1a71509887"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a string literal through UART.  <a href="#a8760c57be58242bb37cd6e1a71509887">More...</a><br /></td></tr>
<tr class="separator:a8760c57be58242bb37cd6e1a71509887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20af82f150b3051d493bbd69e4e56ee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#af20af82f150b3051d493bbd69e4e56ee">SendStr</a> (const std::string &amp;str)</td></tr>
<tr class="separator:af20af82f150b3051d493bbd69e4e56ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adace14fb9fd56f57c41cc25df1c87fd7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#adace14fb9fd56f57c41cc25df1c87fd7">SendBuffer</a> (const std::vector&lt; Byte &gt; &amp;buf)</td></tr>
<tr class="separator:adace14fb9fd56f57c41cc25df1c87fd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80f3b81458069d15d2e4d4ffb58e697"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#ae80f3b81458069d15d2e4d4ffb58e697">PeekChar</a> (char *out_char)</td></tr>
<tr class="separator:ae80f3b81458069d15d2e4d4ffb58e697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac73b5c8f3f1840e2e0da3fd8fdeab00a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#ac73b5c8f3f1840e2e0da3fd8fdeab00a">SetLoopMode</a> (const bool flag)</td></tr>
<tr class="separator:ac73b5c8f3f1840e2e0da3fd8fdeab00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:afaf4d6efa0bebe512461e4eddb5f5c73"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#afaf4d6efa0bebe512461e4eddb5f5c73">UartDevice</a> (const <a class="el" href="structlibsc_1_1kl26_1_1_uart_device_1_1_initializer.xhtml">Initializer</a> &amp;initializer)</td></tr>
<tr class="separator:afaf4d6efa0bebe512461e4eddb5f5c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd63e4362c7af4ece04f09de0b55000f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#abd63e4362c7af4ece04f09de0b55000f">UartDevice</a> (nullptr_t)</td></tr>
<tr class="separator:abd63e4362c7af4ece04f09de0b55000f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a91dca2854e630b35785e419a026928d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::function&lt;bool(const Byte)&gt; <a class="el" href="classlibsc_1_1kl26_1_1_uart_device.xhtml#a91dca2854e630b35785e419a026928d8">libsc::kl26::UartDevice::OnReceiveListener</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1da7c63948955f172b2517c0508834dd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual libsc::kl26::UartDevice::~UartDevice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="afaf4d6efa0bebe512461e4eddb5f5c73"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">libsc::kl26::UartDevice::UartDevice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structlibsc_1_1kl26_1_1_uart_device_1_1_initializer.xhtml">Initializer</a> &amp;&#160;</td>
          <td class="paramname"><em>initializer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="abd63e4362c7af4ece04f09de0b55000f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">libsc::kl26::UartDevice::UartDevice </td>
          <td>(</td>
          <td class="paramtype">nullptr_t&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae80f3b81458069d15d2e4d4ffb58e697"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::PeekChar </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>out_char</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="af96ea32b5d7cb365235eeea352edb3bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendBuffer </td>
          <td>(</td>
          <td class="paramtype">const Byte *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a buffer through UART. </p>
<p>A copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td></td></tr>
    <tr><td class="paramname">len</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="a4a645521121642cd452635cffb20b011"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendBuffer </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; Byte[]&gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a buffer through UART. </p>
<p>A moved copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td></td></tr>
    <tr><td class="paramname">len</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="a86411029fa58983a42c0d3f70303be6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendBuffer </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; Byte &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a buffer through UART. </p>
<p>A moved copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="adace14fb9fd56f57c41cc25df1c87fd7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendBuffer </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; Byte &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aaec97cf9f8befa243bd8dfa154f5b8de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendStr </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a string through UART. </p>
<p>A copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="a5260afddae33bcc6a8897352aba515ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendStr </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; char[]&gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a string through UART. </p>
<p>A moved copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="a15b3b251f38e8e133cfaab3810baac5a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendStr </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a string through UART. </p>
<p>A moved copy will be queued</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="af20af82f150b3051d493bbd69e4e56ee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendStr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8760c57be58242bb37cd6e1a71509887"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libsc::kl26::UartDevice::SendStrLiteral </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a string literal through UART. </p>
<p>MUST ONLY be used with string literals</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if successful, false otherwise (say, tx buffer is full) </dd></dl>

</div>
</div>
<a class="anchor" id="ac73b5c8f3f1840e2e0da3fd8fdeab00a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void libsc::kl26::UartDevice::SetLoopMode </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 7 2015 21:10:48 for libsccc by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.8
</small></address>
</body>
</html>
